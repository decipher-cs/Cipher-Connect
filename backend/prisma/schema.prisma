generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model refreshToken {
  tokenOwnerIdRelation user   @relation(fields: [username], references: [username])
  tokenValue           String @id @map("token_value")
  username             String @map("username") @db.VarChar(16)

  @@map("refresh_token")
}

model user {
  username    String   @id @db.VarChar(16)
  displayName String   @unique @map("display_name") @db.VarChar(16)
  createTime  DateTime @default(now()) @map("create_time") @db.Timestamp(0)

  refreshTokens refreshToken[]
  message       message[]
  roomConfig    roomConfig[]
  participation userRoomParticipation[]
  passwordHash  passwordHash?
}

model passwordHash {
  key      Int    @id @unique @default(autoincrement())
  username String @unique @db.VarChar(16)
  hash     String @map("hash") @db.VarChar(60)

  usernameRelation user @relation(fields: [username], references: [username])

  @@map("password_hash")
}

model roomConfig {
  key      Int    @id @unique @default(autoincrement())
  username String @db.VarChar(16)
  roomId   String

  isHidden Boolean @default(false)

  userRelation   user @relation(fields: [username], references: [username])
  roomIdRelation room @relation(fields: [roomId], references: [roomId])

  @@unique([username, roomId])
  @@map("room_config")
}

model room {
  roomId           String  @id @default(cuid())
  roomDisplayName  String  @db.VarChar(33)
  isMaxCapacityTwo Boolean @default(false)

  message        message[]
  userRoomConfig roomConfig[]
  participation  userRoomParticipation[]
}

model userRoomParticipation {
  key      Int    @id @unique @default(autoincrement())
  username String
  roomId   String

  usernameRelation user @relation(fields: [username], references: [username])
  roomIdRelation   room @relation(fields: [roomId], references: [roomId])

  @@unique([username, roomId])
  @@map("user_room_participation")
}

model message {
  key            Int      @id @default(autoincrement())
  senderUsername String
  roomId         String
  content        String   @db.LongText
  createdAt      DateTime @default(now())
  editedAt       DateTime? @updatedAt

  sender user @relation(fields: [senderUsername], references: [username])
  room   room @relation(fields: [roomId], references: [roomId])
}
