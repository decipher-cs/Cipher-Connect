generator client {
  provider = "prisma-client-js"
}

generator client2 {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  tokenOwnerIdRelation User   @relation(fields: [username], references: [username])
  tokenValue           String @id
  username             String
}

model User {
  key        String   @id @unique @default(cuid())
  username   String   @unique @db.VarChar(16)
  createTime DateTime @default(now()) @db.Timestamp(0)

  displayName String  @db.VarChar(16)
  avatarPath  String? @db.MediumText

  refreshTokens RefreshToken[]
  message       Message[]
  roomConfig    RoomConfig[]
  userRoom      UserRoom[]
  passwordHash  PasswordHash?
  rooms         Room[]
}

model PasswordHash {
  key      Int    @id @unique @default(autoincrement())
  username String @unique @db.VarChar(16)
  hash     String @db.VarChar(60)

  user User @relation(fields: [username], references: [username])
}

model RoomConfig {
  username String
  roomId   String

  isHidden            Boolean @default(false)
  hasUnreadMessages   Boolean @default(true)
  isNotificationMuted Boolean @default(false)

  user     User      @relation(fields: [username], references: [username], onDelete: Cascade)
  room     Room      @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  userRoom UserRoom?

  @@id([username, roomId])
}

enum RoomType {
  private
  group
}

model Room {
  roomId               String  @id @default(cuid())
  roomDisplayName      String? @db.VarChar(16)
  roomDisplayImagePath String? @db.MediumText

  roomType RoomType

  message        Message[]
  userRoomConfig RoomConfig[]
  userRoom       UserRoom[]
  user           User[]
}

model UserRoom {
  username String
  roomId   String
  configId Int    @unique

  user       User       @relation(fields: [username], references: [username], onDelete: Cascade)
  room       Room       @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  roomConfig RoomConfig @relation(fields: [username, roomId], references: [username, roomId], onDelete: Cascade)

  @@id([username, roomId])
}

enum MessageContentType {
  audio
  video
  text
  image
  file
}

model Message {
  key            String             @id @unique @default(uuid())
  senderUsername String
  roomId         String
  content        String             @db.MediumText
  createdAt      DateTime           @default(now())
  editedAt       DateTime?          @updatedAt
  contentType    MessageContentType
  MIME           String?            @db.MediumText

  sender User @relation(fields: [senderUsername], references: [username])
  room   Room @relation(fields: [roomId], references: [roomId])
}
